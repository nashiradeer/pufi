pub interface Read {
    func (self: var &Read) read(buffer: var &byte[], offset: integer, size: integer): integer;

    func (self: var &Read) read_all(): List<byte> {
        var all = new List<byte>;
        var continue = false;

        do {
            var buffer: byte[256] = [];
            const count = self.read(buffer, 0, 256);
            buffer.extend(buffer, count);
            continue = count == 256;
        } while (continue);

        return all;
    }
}

pub interface Write {
    func (self: var &Write) write(self: &var Write, buffer: &byte[], offset: integer, size: integer): integer;
}

pub struct File {
    pub file_name: string;
}

pub func new(name: string): File {
    return {
        file_name: name
    };
}

pub func (file: var &File) read(buffer: var &byte[], offset: integer, size: integer): integer {
    // implement read
}

pub func (file: var &File) write(buffer: &byte[], offset: integer, size: integer): integer {
    // implement write
}